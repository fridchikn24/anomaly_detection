# -*- coding: utf-8 -*-
"""anomalies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p26pDgn1xWZqU7MAW9p09PIFVkDLBOiq
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest

# Generate synthetic data with anomalies
np.random.seed(42)
normal_data = np.random.randn(3000, 2)
anomalies = 4 + 1.5 * np.random.randn(1000, 2)  # Generating anomalies far from normal data

# Combine normal and anomaly data
data = np.vstack([normal_data, anomalies])
labels = np.array([1] * len(normal_data) + [-1] * len(anomalies))

# Initialize and fit the Isolation Forest model
clf = IsolationForest(contamination=0.05, random_state=42)  # Adjust contamination parameter as needed
clf.fit(data)

# Predict whether each data point is an anomaly (1 for inliers, -1 for outliers)
predictions = clf.predict(data)

# Visualize the results
plt.scatter(data[:, 0], data[:, 1], c=predictions, cmap='viridis')
plt.colorbar(label="Anomaly Score")
plt.title("Anomaly Detection using Isolation Forest")
plt.show()

# Identify anomalies (outliers)
anomalies_indices = np.where(predictions == -1)[0]
print("Detected anomalies:", anomalies_indices)

from sklearn.metrics import ConfusionMatrixDisplay

ConfusionMatrixDisplay.from_predictions(labels,predictions)

from sklearn.svm import OneClassSVM


# Initialize and fit the One-Class SVM model
clf = OneClassSVM(nu=0.05, kernel="rbf")  # Adjust the nu parameter as needed
clf.fit(data)

# Predict whether each data point is an anomaly (-1 for anomalies, 1 for normal data)
predictions = clf.predict(data)

# Visualize the results
plt.scatter(data[:, 0], data[:, 1], c=predictions, cmap='viridis')
plt.colorbar(label="Anomaly Score")
plt.title("Anomaly Detection using One-Class SVM")
plt.show()

# Identify anomalies (outliers)
anomalies_indices = np.where(predictions == -1)[0]
print("Detected anomalies:", anomalies_indices)
ConfusionMatrixDisplay.from_predictions(labels,predictions)

#import numpy as np
#import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
#from sklearn.svm import OneClassSVM
#from sklearn.ensemble import IsolationForest
from sklearn.datasets import make_classification
from scipy.stats import norm

# Generate synthetic data with anomalies
np.random.seed(42)
normal_data, _ = make_classification(n_samples=3000, n_features=2, n_informative=2, n_redundant=0, random_state=42)
anomalies = np.random.randn(1000, 2) * 3 + np.array([4, 4])  # Generating anomalies far from normal data
data = np.vstack([normal_data, anomalies])

# Labels (1 for normal data, -1 for anomalies)
labels = np.array([1] * len(normal_data) + [-1] * len(anomalies))

# Initialize and fit Random Forest classifier for anomaly detection
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(data, labels)
rf_predictions = rf.predict(data)

# Initialize and fit AdaBoost classifier for anomaly detection
ada = AdaBoostClassifier(n_estimators=100, random_state=42)
ada.fit(data, labels)
ada_predictions = ada.predict(data)

# Initialize and fit Gradient Boosting classifier for anomaly detection
gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
gb.fit(data, labels)
gb_predictions = gb.predict(data)

# Initialize and fit Decision Tree classifier for anomaly detection
dt = DecisionTreeClassifier(random_state=42)
dt.fit(data, labels)
dt_predictions = dt.predict(data)

# Initialize and fit One-Class SVM for anomaly detection
svm = OneClassSVM(kernel='rbf', nu=0.05)
svm.fit(data)
svm_predictions = svm.predict(data)

# Initialize and fit Isolation Forest for anomaly detection
iso_forest = IsolationForest(contamination=0.05, random_state=42)
iso_forest.fit(data)
iso_forest_predictions = iso_forest.predict(data)

# Initialize and fit Extreme Value Theory (EVT) for anomaly detection
mu, sigma = norm.fit(data)  # Estimate distribution parameters
threshold = np.percentile(norm.pdf(data, mu, sigma), 95)  # Set a threshold
evt_predictions = (norm.pdf(data, mu, sigma) < threshold).astype(int)

# Visualize the results
def plot_anomaly_detection_results(predictions, title):
    plt.scatter(data[:, 0], data[:, 1], c=predictions, cmap='viridis')
    plt.colorbar(label="Anomaly Score")
    plt.title(title)
    plt.show()

plot_anomaly_detection_results(rf_predictions, "Anomaly Detection using Random Forest")
plot_anomaly_detection_results(ada_predictions, "Anomaly Detection using AdaBoost")
plot_anomaly_detection_results(gb_predictions, "Anomaly Detection using Gradient Boosting")
plot_anomaly_detection_results(dt_predictions, "Anomaly Detection using Decision Trees")
plot_anomaly_detection_results(svm_predictions, "Anomaly Detection using One-Class SVM")
plot_anomaly_detection_results(iso_forest_predictions, "Anomaly Detection using Isolation Forest")

from sklearn.metrics import  classification_report


print('Random Forest')
ConfusionMatrixDisplay.from_predictions(labels,rf_predictions)
print(classification_report(labels, rf_predictions))
print('adaboost')
print(classification_report(labels, ada_predictions))
ConfusionMatrixDisplay.from_predictions(labels,ada_predictions)
print('gradient boost')
print(classification_report(labels, gb_predictions))
ConfusionMatrixDisplay.from_predictions(labels,gb_predictions)
print('one-way SVM')
print(classification_report(labels, svm_predictions))
ConfusionMatrixDisplay.from_predictions(labels,svm_predictions)
print('Isolation forest')
print(classification_report(labels,iso_forest_predictions))
ConfusionMatrixDisplay.from_predictions(labels,iso_forest_predictions)
print('decision tree')
print(classification_report(labels, dt_predictions))
ConfusionMatrixDisplay.from_predictions(labels,dt_predictions)